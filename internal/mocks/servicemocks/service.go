// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	pgmodel "API_for_SN_go/internal/model/pgmodel"
	service "API_for_SN_go/internal/service"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockAuth) CreateToken(ctx context.Context, input service.UserAuthInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthMockRecorder) CreateToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuth)(nil).CreateToken), ctx, input)
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, input service.UserCreateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, input)
}

// DeleteUser mocks base method.
func (m *MockAuth) DeleteUser(ctx context.Context, input service.UserDeleteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthMockRecorder) DeleteUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuth)(nil).DeleteUser), ctx, input)
}

// ParseToken mocks base method.
func (m *MockAuth) ParseToken(ctx context.Context, tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthMockRecorder) ParseToken(ctx, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuth)(nil).ParseToken), ctx, tokenString)
}

// UpdateUsername mocks base method.
func (m *MockAuth) UpdateUsername(ctx context.Context, input service.UpdateUsernameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockAuthMockRecorder) UpdateUsername(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockAuth)(nil).UpdateUsername), ctx, input)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockUser) GetUserByUsername(ctx context.Context, username string) (pgmodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(pgmodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUser)(nil).GetUserByUsername), ctx, username)
}

// UpdateFullName mocks base method.
func (m *MockUser) UpdateFullName(ctx context.Context, input service.UserUpdateFullNameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFullName", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFullName indicates an expected call of UpdateFullName.
func (mr *MockUserMockRecorder) UpdateFullName(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFullName", reflect.TypeOf((*MockUser)(nil).UpdateFullName), ctx, input)
}

// MockPost is a mock of Post interface.
type MockPost struct {
	ctrl     *gomock.Controller
	recorder *MockPostMockRecorder
}

// MockPostMockRecorder is the mock recorder for MockPost.
type MockPostMockRecorder struct {
	mock *MockPost
}

// NewMockPost creates a new mock instance.
func NewMockPost(ctrl *gomock.Controller) *MockPost {
	mock := &MockPost{ctrl: ctrl}
	mock.recorder = &MockPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost) EXPECT() *MockPostMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPost) CreatePost(ctx context.Context, input service.PostCreateInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostMockRecorder) CreatePost(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPost)(nil).CreatePost), ctx, input)
}

// GetPostById mocks base method.
func (m *MockPost) GetPostById(ctx context.Context, postId string) (pgmodel.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, postId)
	ret0, _ := ret[0].(pgmodel.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostMockRecorder) GetPostById(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPost)(nil).GetPostById), ctx, postId)
}

// MockReaction is a mock of Reaction interface.
type MockReaction struct {
	ctrl     *gomock.Controller
	recorder *MockReactionMockRecorder
}

// MockReactionMockRecorder is the mock recorder for MockReaction.
type MockReactionMockRecorder struct {
	mock *MockReaction
}

// NewMockReaction creates a new mock instance.
func NewMockReaction(ctrl *gomock.Controller) *MockReaction {
	mock := &MockReaction{ctrl: ctrl}
	mock.recorder = &MockReactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaction) EXPECT() *MockReactionMockRecorder {
	return m.recorder
}

// CreateReaction mocks base method.
func (m *MockReaction) CreateReaction(ctx context.Context, input service.ReactionCreateInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReaction", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReaction indicates an expected call of CreateReaction.
func (mr *MockReactionMockRecorder) CreateReaction(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReaction", reflect.TypeOf((*MockReaction)(nil).CreateReaction), ctx, input)
}

// DeleteReaction mocks base method.
func (m *MockReaction) DeleteReaction(ctx context.Context, reactionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReaction", ctx, reactionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReaction indicates an expected call of DeleteReaction.
func (mr *MockReactionMockRecorder) DeleteReaction(ctx, reactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReaction", reflect.TypeOf((*MockReaction)(nil).DeleteReaction), ctx, reactionId)
}

// GetManyReactions mocks base method.
func (m *MockReaction) GetManyReactions(ctx context.Context, postId string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyReactions", ctx, postId)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyReactions indicates an expected call of GetManyReactions.
func (mr *MockReactionMockRecorder) GetManyReactions(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyReactions", reflect.TypeOf((*MockReaction)(nil).GetManyReactions), ctx, postId)
}

// GetReactionById mocks base method.
func (m *MockReaction) GetReactionById(ctx context.Context, reactionId string) (pgmodel.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactionById", ctx, reactionId)
	ret0, _ := ret[0].(pgmodel.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionById indicates an expected call of GetReactionById.
func (mr *MockReactionMockRecorder) GetReactionById(ctx, reactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionById", reflect.TypeOf((*MockReaction)(nil).GetReactionById), ctx, reactionId)
}

// MockComment is a mock of Comment interface.
type MockComment struct {
	ctrl     *gomock.Controller
	recorder *MockCommentMockRecorder
}

// MockCommentMockRecorder is the mock recorder for MockComment.
type MockCommentMockRecorder struct {
	mock *MockComment
}

// NewMockComment creates a new mock instance.
func NewMockComment(ctrl *gomock.Controller) *MockComment {
	mock := &MockComment{ctrl: ctrl}
	mock.recorder = &MockCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComment) EXPECT() *MockCommentMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockComment) CreateComment(ctx context.Context, input service.CommentCreateInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentMockRecorder) CreateComment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockComment)(nil).CreateComment), ctx, input)
}

// DeleteComment mocks base method.
func (m *MockComment) DeleteComment(ctx context.Context, input service.CommentDeleteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentMockRecorder) DeleteComment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockComment)(nil).DeleteComment), ctx, input)
}

// GetCommentById mocks base method.
func (m *MockComment) GetCommentById(ctx context.Context, commentId string) (pgmodel.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentById", ctx, commentId)
	ret0, _ := ret[0].(pgmodel.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentById indicates an expected call of GetCommentById.
func (mr *MockCommentMockRecorder) GetCommentById(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentById", reflect.TypeOf((*MockComment)(nil).GetCommentById), ctx, commentId)
}

// GetManyComments mocks base method.
func (m *MockComment) GetManyComments(ctx context.Context, filter, filterParams string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyComments", ctx, filter, filterParams)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyComments indicates an expected call of GetManyComments.
func (mr *MockCommentMockRecorder) GetManyComments(ctx, filter, filterParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyComments", reflect.TypeOf((*MockComment)(nil).GetManyComments), ctx, filter, filterParams)
}

// UpdateComment mocks base method.
func (m *MockComment) UpdateComment(ctx context.Context, input service.CommentUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentMockRecorder) UpdateComment(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockComment)(nil).UpdateComment), ctx, input)
}
